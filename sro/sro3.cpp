//
// Created by Kuanysh Yabekov on 22.10.2025.
//
#include <iostream>
#include <list>
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>

/** @brief <b>Лабораторная работа 12</b>\n
 * <b>Уровень C</b>\n
 * <p>Имеется текстовый файл с целыми числами. Требуется сначала все
 * числа из данного файла записать в двусвязный линейный список. Затем
 * удалить из списка все элементы, обладающие свойством Q. После чего
 * продублировать все элементы линейного списка, обладающие свойством
 * R. Наконец, упорядочить все элементы линейного списка, обладающие
 * свойством T, оставив остальные элементы на своих местах. Свойства Q, R
 * и T указаны в индивидуальных вариантах. После каждого преобразования
 * линейного списка вывести его на экран.</p>
 * <p><b>Вариант C8:</b> Q: сумма цифр числа равна 10. R: число содержит в младшем разряде
 * цифру 3. T: число является двузначным.</p>
 * Программа должна содержать следующие функции:\n
 * <li>создание списка и заполнение его целыми числами из текстового файла</li>
 * <li>вывод списка на экран</li>
 * <li>удаление всех элементов списка, обладающих свойством Q</li>
 * <li>дублирование всех элементов списка, обладающих свойством R</li>
 * <li>сортировка всех элементов списка, обладающих свойством T</li>
 * <li>удаление всего списка.</li>
 */

using namespace std;

/**
 * @brief Свойство Q: Сумма цифр числа равна 10.
 * @param n Целое число.
 * @return true, если сумма цифр равна 10.
 */
bool property_Q(int n) {
    if (n < 0) n = -n; // Работаем с абсолютным значением
    int sum = 0;
    string s = to_string(n);
    for (char c : s) {
        sum += c - '0';
    }
    return sum == 10;
}

/**
 * @brief Свойство R: Число содержит в младшем разряде цифру 3 (т.е. оканчивается на 3).
 * @param n Целое число.
 * @return true, если последняя цифра равна 3.
 */
bool property_R(int n) {
    if (n < 0) n = -n;
    return (n % 10) == 3;
}

/**
 * @brief Свойство T: Число является двузначным.
 * @param n Целое число.
 * @return true, если число находится в диапазоне [-99, -10] или [10, 99].
 */
bool property_T(int n) {
    return (n >= 10 && n <= 99) || (n <= -10 && n >= -99);
}

// --- Функции для работы со списком ---

/**
 * @brief Создание списка и заполнение его целыми числами из текстового файла.
 * @return std::list<int> с прочитанными числами.
 */
list<int> get_list_from_file(const string& filename) {
    list<int> result_list;
    // Открываем файл
    ifstream inputFile(filename);

    if (!inputFile.is_open()) {
        cerr << "Ошибка: Не удалось открыть файл " << filename << ". Используем пустой список." << endl;
        return result_list;
    }

    int number;
    // Читаем целые числа, пока это возможно
    while (inputFile >> number) {
        result_list.push_back(number);
    }

    // Файл закрывается автоматически
    return result_list;
}

/**
 * @brief Вывод списка на экран.
 * @param l Список целых чисел.
 * @param title Заголовок для вывода.
 */
void print_list(const list<int>& l, const string& title = "Содержимое списка") {
    cout << "\n--- " << title << " ---" << endl;
    if (l.empty()) {
        cout << "Список пуст." << endl;
        return;
    }
    for (int num : l) {
        cout << num << " ";
    }
    cout << endl;
}

/**
 * @brief Удаление всех элементов списка, обладающих свойством Q.
 * @param l Список целых чисел.
 */
void remove_Q_elements(list<int>& l) {
    cout << "\n[Шаг 1: Удаление] Удаление элементов, где сумма цифр равна 10 (Свойство Q)..." << endl;

    // Используем метод erase-remove idiom для list: remove_if
    auto it = l.begin();
    while (it != l.end()) {
        if (property_Q(*it)) {
            // Удаляем элемент и переходим к следующему
            it = l.erase(it);
        } else {
            // Переходим к следующему элементу
            ++it;
        }
    }
    print_list(l, "Список после удаления элементов Q");
}

/**
 * @brief Дублирование всех элементов списка, обладающих свойством R.
 * @param l Список целых чисел.
 */
void duplicate_R_elements(list<int>& l) {
    cout << "\n[Шаг 2: Дублирование] Дублирование элементов, оканчивающихся на 3 (Свойство R)..." << endl;

    auto it = l.begin();
    while (it != l.end()) {
        if (property_R(*it)) {
            // Дублируем элемент, вставляя копию перед текущим
            l.insert(it, *it);
            // Продвигаем итератор на два шага, чтобы пропустить новый и старый элементы
            ++it;
        }
        ++it;
    }
    print_list(l, "Список после дублирования элементов R");
}

/**
 * @brief Сортировка всех элементов списка, обладающих свойством T.
 * Остальные элементы остаются на своих местах.
 * @param l Список целых чисел.
 */
void sort_T_elements(list<int>& l) {
    cout << "\n[Шаг 3: Сортировка] Упорядочивание двузначных чисел (Свойство T), остальные на своих местах..." << endl;

    // 1. Собираем все элементы, обладающие свойством T, в отдельный вектор.
    vector<int> t_elements;
    for (int num : l) {
        if (property_T(num)) {
            t_elements.push_back(num);
        }
    }

    // 2. Сортируем собранный вектор.
    ranges::sort(t_elements);

    // 3. Заменяем элементы в исходном списке отсортированными значениями.
    auto list_it = l.begin();
    auto vector_it = t_elements.begin();

    while (list_it != l.end()) {
        if (property_T(*list_it)) {
            // Заменяем элемент в списке на следующий отсортированный элемент из вектора
            *list_it = *vector_it;
            ++vector_it;
        }
        ++list_it;
    }

    print_list(l, "Список после частичной сортировки элементов T");
}

/**
 * @brief Удаление всего списка (для std::list это метод clear()).
 * @param l Список целых чисел.
 */
void delete_entire_list(list<int>& l) {
    l.clear();
    cout << "\n[Шаг 4: Удаление] Весь список был удален (метод clear())." << endl;
    print_list(l, "Список после полного удаления");
}

/**
 * @brief Главная функция, содержащая логику выполнения задания.
 */
int main() {
    // 1. Создание временного файла для демонстрации
    const string FILENAME = "input_data.txt";
    // Пример данных для теста:
    // Q: 19 (1+9=10), 55 (5+5=10), 1234 (1+2+3+4=10).
    // R: 3, -13, 23.
    // T: 42, -99, 10.
    // Остальные: 1, 100, -1000.
    ofstream ofs(FILENAME);
    ofs << 19 << " " << 100 << " " << 42 << " " << 3 << " " << 1 << " " << 55 << " " << -99 << " " << 23 << " " << -13 << " " << 1234 << " " << 10 << " " << -1000;
    ofs.close();
    cout << "Создан тестовый файл '" << FILENAME << "'." << endl;

    // 2. Создание и заполнение списка
    list<int> my_list = get_list_from_file(FILENAME);
    print_list(my_list, "Исходный список из файла");

    // 3. Выполнение операций в соответствии с заданием

    // Шаг 1: Удаление элементов Q
    remove_Q_elements(my_list);

    // Шаг 2: Дублирование элементов R
    duplicate_R_elements(my_list);

    // Шаг 3: Сортировка элементов T
    sort_T_elements(my_list);

    // Шаг 4: Удаление всего списка
    delete_entire_list(my_list);

    return 0;
}
